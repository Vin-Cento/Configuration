# audio
XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +5%
XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -5%
XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle
XF86MonBrightnessUp
	brightnessctl s 5%+
XF86MonBrightnessDown
	brightnessctl s 5%-

# program launcher
super + Return 
    alacritty

super + v
    alacritty -e nvim

super + t
    bspc rule -a \* -o state=floating && alacritty -e nvim ~/Documents/.vimwiki/TODO.md

super + @space
	rofi -show drun

super + shift + j
    bspc rule -a \* -o state=floating && alacritty -e nvim ~/Documents/.vimwiki/Journal.md
    


super + shift + g
	chromium --incognito
super + g
	chromium

super + shift + o
	libreoffice

super + shift + v
	virt-manager

super + shift + s
	slack

super + shift+ w
	networkmanager_dmenu -fn 'Mononoki Mono-12'

super +  m
	alacritty -e neomutt

super + shift + f
	alacritty -e lfrun

super + p
	passmenu -fn 'Mononoki Mono-12'

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd
	pkill -9 "polybar"
	bash ~/.config/polybar/launch.sh --hack &

Print
 	flameshot gui -p ~/Downloads/ScreenShots

super + Print
	sxiv ~/Downloads/ScreenShots

#
# bspwm hotkeys
#

# quit/restart bspwm
super + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift + }semicolon
	bspc node -{c,k}

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + shift + g
	bspc node -s biggest.window

# add to tabbed container
ctrl + alt + {Left,Down,Up,Right}
    tabc attach $(bspc query -N -n) {$(bspc query -N -n west),$(bspc query -N -n south),$(bspc query -N -n north),$(bspc query -N -n east)}

# create/remove from tabbed container
super + z 
    id=$(bspc query -N -n); \
    [[ "$(tabc printclass $id)" == "tabbed" ]] \
    && tabc detach $id \
    || tabc create $id 

# toggle autoattach in tabbed container
super + shift + z 
    tabc autoattach $(bspc query -N -n) 


#
# state/flags
#

# set the window state
super + {n,shift + n,f}
	bspc node -t {tiled,pseudo_tiled,fullscreen}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

escape + a
    bsp desktop -f '^{1}'


#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}


# TODO
alt + @space
    rofi -modi file-browser-extended -show file-browser-extended -file-browser-depth 10 -file-browser-dir ~/ -file-browser-only-files -file-browser-hide-parent
